namespace MathRoot
{
    public static class RootTools
    {
        public static decimal ComputeRoot(Root Root, uint Range)
        {
            string strRoot = default;
            {
                decimal doValue = default;
                decimal verification = default;
                for (int i = 0; true; i++)
                {
                    verification = RootTools.Pow(i, Root.Radical); ;
                    if (verification > Root.RadicalExpression)
                    {
                        break;
                    }
                    else { doValue = i; }
                }
                strRoot = $"{doValue},";
            }


            for (int i = 0; i <= Range; i++)
            {
                decimal FracValue = default;
                decimal DoValue = default;
                for (int j = 0; j < 10; j++)
                {
                    FracValue = decimal.Parse($"{strRoot}{j}");
                    decimal verefication = RootTools.Pow(FracValue, Root.Radical);

                    if (verefication > Root.RadicalExpression)
                    {
                        break;
                    }
                    else
                    {
                        DoValue = FracValue;
                    }
                }
                strRoot = DoValue.ToString();
            }

            return decimal.Parse(strRoot);
        }
        public static decimal Pow(decimal number, decimal degree)
        {
            decimal result = 1;

            for (int i = 0; i < degree; i++)
            {
                result = result * number;
            }

            return result;
        }
    }
    public struct Root
    {
        public Root(decimal RadicalExpression, int Radical = 2)
        {
            this.RadicalExpression = RadicalExpression;
            this.Radical = Radical;
        }
        public int Radical { get; }
        public decimal RadicalExpression { get; }
    }
}
